<?phpnamespace j\tree;/** * 通用树 Tree * 依赖：$tree->setSource() 方法注入 *  source = array( *      cid => array('name' => name, 'pid' => pid), *      cid => array('name' => name, 'pid' => pid), *  ) * @property Relation $relation */class Tree extends BaseTree {    /**     *     * @var array     */    protected $source = array();    /**     * @param $name     * @return Relation|null     */    public function __get($name){        if($name == 'relation'){            return $this->getRelation();        } else {            return null;        }    }    /**     * 设置源始数据     * @param mixed $cats     * @param bool $isAssoc     * @throws     */    function setSource($cats, $isAssoc = false){        $pidKey = $this->pidKey;        $idKey = $this->idKey;        $parentMap = array();        if($isAssoc){            foreach($cats as $cid => $item){                $parentMap[$cid] = $item[$pidKey];            }            $this->source = $cats;        }else{            $tmp = [];            foreach($cats as $cid => $item){                $index = $item[$idKey];                $parentMap[$index] = $item[$pidKey];                $tmp[$index] = $item;            }            $this->source = $tmp;        }        $this->getRelation()->setParentMap($parentMap);        $this->nodes = array();        //$this->loaded = true;    }    /**     *     * @param mixed $id     * @return NodeInterface     */    protected function createElement($id){        if(isset($this->source[$id])){            $props = $this->source[$id];            $name = $props[$this->nameKey];            return $this->createNode($id, $name, $props);        }else{            return null;        }    }    protected function getRelation(){        if(!isset($this->relation)){            // @import, create relation            $this->relation = new Relation();            // fix not load data when call tree method            if(!$this->loaded){                $this->load();            }        }        return $this->relation;    }    /**     * @param $id     * @return NodeInterface|null     */    function getParent($id){        $pid = $this->relation->getParent($id);        if(!$pid){            return null;        }        return $this->getElementById($pid);    }    /**     * @param $id     * @param bool $self     * @param int $maxLevel     * @return NodeInterface[]|array     */    function getParents($id, $self = false, $maxLevel = 5){        $ids = $this->relation->getParents($id, $maxLevel);        if($self){            $ids[] = $id;        }        return $this->getElements($ids);    }    /**     * @param $id     * @return NodeInterface[]|array     */    function getChild($id){        $ids = $this->relation->getChild($id);        return $this->getElements($ids);    }    /**     * @param int $cid     * @param bool $self     * @param int $maxLevel     * @return int[]|string[]     */    function getChildIdentifying($cid, $self = false, $maxLevel = 5){        return $this->relation->getChildren($cid, $self, $maxLevel);    }    /**     * @param mixed $id     * @return int     */    function getDeep($id){        return $this->relation->getDeep($id);    }    /**     * @param $id     * @return bool     */    function hasChild($id){        return $this->relation->hasChild($id);    }}